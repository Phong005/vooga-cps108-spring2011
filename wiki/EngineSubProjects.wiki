#summary Describes goals, responsibilities, and collaborations for sub APIs of VOOGA engine

= Introduction =

Based on our discussion, I have created the packages below to serve as the basis for our engine that will support making games more easily. However, I do not necessarily expect that this will be the final breakdown of these responsibilities. As we flesh out the overall design, some packages may be merged and new ones may be created --- thus communication between the teams working on these packages is essential, even from the start.

Claiming a package below will be done on a first come first serve basis this week in your current teams, but for the next round it will be based on interest and knowledge of the area (so we will shuffle teams). To claim a package, a team must *edit this page* to fill out the information requested for the package. If your team cannot complete this basic information, then it may not be appropriate for you to work on that package.

You may add new packages to the list below, but they must have the same basic information as the other packages and be substantially different from the existing packages. You may also change the name of a package if you have something more descriptive or general in mind.


= Details =

  # Players
     * Claimed by Team 13: Andrea Scripa and Kevin Tao
     * Description: includes managing score and other attributes
     * Design Goals:  Create a flexible player class that can hold different types of information about itself and have uniquely defined behavior by means of extension rather than modification.
     * Core Responsibilities: Create a player class with methods that allow the user to customize its behavior/reactions to events and set/update information about itself.
     * Collaborates With: Events; Stats; Game Resources; Levels
     * Extensions:
  # Levels
     * Claimed by: Team 3: Andrew Patterson, Wes Brown
     * Description: Includes defining a level and its content, and initializing and managing all levels.
     * Design Goals: Define a flexible file format that can be used to represent and read in various types of levels
     * Core Responsibilities: Provide a file format to represent a level and provide a method to import and initialize game levels.
     * Collaborates With: States, Players, Resources, Level Editor
     * Extensions:
  # Views
     * Claimed by:  Team 6 - Alex Daniel, Andrew Miller
     * Description: views of game space, additional window features for game
     * Design Goals: Create a game space that allows for image wrapping/reflecting
     * Core Responsibilities: Define edge behavior and imaging
     * Collaborates With: Physics (setting coordinate standards)
     * Extensions: z-axis
  # Collisions & Advanced Sprites
     * Claimed by: Team 8 - Max Egan, Julian Genkins
     * Description: Creating more intelligent, efficient collision manager and collision system. Allow for a wider variety of collisions.
     * Design Goals: Include both a standard set of collision guidelines as well as an API that allows extension into game-specific collisions. 
     * Core Responsibilities: A user friendly collision core that is strong enough for ease of basic use but flexible enough to be extended into environments  which might require implementation of new collision rules. Adding functionality to the basic sprite class including customizable collision shapes, collision direction and physical linkage.
     * Collaborates With: Physics Engine, Events, States/Modes?
     * Extensions:
  # Events
     * Claimed by: Team 1: Michael Ansel, Ethan Goh
     * Description: Provides the control necessary for an event driven system.  Manages the timely processing and synchronization of events.   
     * Design Goals: Create an efficient and extensible system that allows users to easily register and swap out sets of event handlers.
     * Core Responsibilities: Provide the framework for which all the components make requests (fire/register events) to the engine to be processed.
     * Collaborates With: Game Loop, States/Modes, Physics Engine, Game Resources, Any other team that potentially requires a set of controls to drive their component.
     * Extensions:
  # States/Modes
     * Claimed by Team 9 - Conrad, Shun
     * Description: To coordinate flow between different game states in a Game (ie. running, paused, loading, etc.)
     * Design Goals: To create a very easy way to add different "GameStates" to a game and organize accordingly
     * Core Responsibilities: Implementing multiple GameStates within a hierarchy system, holding/managing respective keyEvents for each GameState
     * Collaborates With: Game Loop and Event Team
     * Extensions:
  # Game Resources
     * Claimed by Misha Lavrov, Sterling Dorminey
     * Description: path-based sprite movement, XML image loading, simple sprite-based GUI, customizable keyboard input, advanced randomization
     * Design Goals: Create lightweight utility classes that can be used with GTGE tools without imposing a strict framework
     * Core Responsibilities: Provide framework for loading non-level resources and other utility functions.
     * Collaborates With: maybe Events, maybe Level Editor, for certain functionality
     * Extensions:
  # Stats
     * Claimed by 
     * Description: view game statistics separate from game play
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Game Loop
     * Claimed by Team 14: DJ Sharkey and Kevin Wang
     * Description: allow control of the main game loop
     * Design Goals:To allow the basic control loop  (input->update->render) to be easily accessed and altered.
     * Core Responsibilities: To simply the control and progression of the game.
     * Collaborates With: Players, Levels, Views, (really with everyone, but through layers of separation)
     * Extensions:
  # Physics Engine 
     * Claimed by: Team 12: Nathan Klug and Anne Weng
     * Description: Allow game designers to easily use standard physical reactions or define their own style of physics for a game.
     * Design Goals: Model basic Newtonian physics (F = ma, conservation of momentum, etc), allow users to choose which elements are acting, and allow for easy additions of new forces
     * Core Responsibilities: Extensible way to add forces like gravity, manage the changes to the state of game objects after a collision.
     * Collaborates With: Events, Collisions, (possibly Level/Level Editor for the currently active forces), View (setting coordinate standards)
     * Extensions:
  # Artificial Intelligence Engine
     * Claimed by
     * Description:  Allow game designers to create smart enemies to oppose the player.
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Networking Engine 
     * Claimed by Team 15: Lingzhao Xie, Roman Zhang
     * Description: Allow users to sit at different computers and connect to a common game session. An update at any one computer should be visible immediately to all connected users.
     * Design Goals: Provide an API so users can create a game and become visible on the local area network, other users can join/exit the game. Users can send out any serializable object, the network engine will generate an event upon receive.
     * Core Responsibilities:
     * Collaborates With: Events
     * Extensions:
  # Replay
     * Claimed by Team 10: Josue Mirtil, and Chris James
     * Description:  Allow users to save, resume, or re-view previously played games.
     * Design Goals: Creating Class that links changes to state by time elapsed between changes. This "StateTable" would then be used to replay/save/resume play. StateTable will hold serialized objects. Save files in txt format will save StateTables in tree structure, based on resume point and save point. 
     * Core Responsibilities: Create a way in which the user can save and resume gameplay even after closing the game. Also allow user to replay game.
     * Collaborates With: States/Modes
     * Extensions: Allow pause functionality in-game. Allow user to compare replays using tree traversal. Allow for fast-forward, rewind, and skipping through replays.
  # Level Editor
     * Claimed by Team 11 (Charlie Hatcher Alex Lee)
     * Description: Allow game designers to edit levels graphically rather than hand editing a text file.
     * Design Goals:Create an efficient and general model that allows users to create/modify levels for all types of games (panning, static etc).
     * Core Responsibilities: Develop a user interface that allows users to load, save, and alter level files graphically.
     * Collaborates With:Level, Possibly Development Environment, and GameLoop
     * Extensions:
  # Mod Environment
     * Claimed by 
     * Description:
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Development Environment(Debugger)
     * Claimed by - Team 2( Troy Ferrell & Austin Benesh)
     * Description: Allow designers greater control over development of their games by allowing them to easily trace their system during testing
     * Design Goals: Create a debugging framework that allows for the reading & setting of variables in the system
     * Core Responsibilities: Develop user interface for manipulation of values. Also develop UI for visual representation of variable state over time(plot graph)
     * Collaborates With:
     * Extensions:
  # User Interface Design
     * Claimed by - Team ?( David Colon-Smith and David Crowe)
     * Description: Create user interface components- menus, "pop-overs", and display components.
     * Design Goals: Create re-usable parts that are extendable and easy to use- that can be used to structure the game into a coherent and impressive final product
     * Core Responsibilities: UI Objects
     * Collaborates With: 
     * Extensions: 