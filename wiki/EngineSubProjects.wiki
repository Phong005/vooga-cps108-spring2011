#summary Describes goals, responsibilities, and collaborations for sub APIs of VOOGA engine

= Introduction =

Based on our discussion, I have created the packages below to serve as the basis for our engine that will support making games more easily. However, I do not necessarily expect that this will be the final breakdown of these responsibilities. As we flesh out the overall design, some packages may be merged and new ones may be created --- thus communication between the teams working on these packages is essential, even from the start.

Claiming a package below will be done on a first come first serve basis this week in your current teams, but for the next round it will be based on interest and knowledge of the area (so we will shuffle teams). To claim a package, a team must *edit this page* to fill out the information requested for the package. If your team cannot complete this basic information, then it may not be appropriate for you to work on that package.

You may add new packages to the list below, but they must have the same basic information as the other packages and be substantially different from the existing packages.


= Details =

  # Players
     * Claimed by 
     * Description: includes managing score and other attributes
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Levels
     * Claimed by 
     * Description:
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Views
     * Claimed by 
     * Description: views of game space
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Collision Manager (detecting and allowing custom reponses)
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Event System (allow handling of game events outside the main game loop)
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # State System (allow games to be in different states during play)
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Game Resources (specifically images, sounds, time, random)
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Overlay/Static View (view game statistics separate from game play)
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Command Access (for future enhancement via game console)
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Game Loop (allow control of the main game loop)
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Physics Engine Allow game designers to easily use standard physical reactions or define their own style of physics for a game.
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Artificial Intelligence Engine Allow game designers to create smart enemies to oppose the player.
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Networking Engine Allow users to sit at different computers and connect to a common game session. An update at any one computer should be visible immediately to all connected users.
     * Claimed by 
     * Description: 
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Level Editor Designing levels for a game is difficult for many reasons: the shear number of objects to create and the difficulty of testing the level's play-ability are chief among them. But these problems are compounded if the game designer must hand-edit a text file to specify appearance of all the level's objects. Build an application that allows game designers to load, save, and edit the appearance of game levels graphically. Your GUI should show conform to standard visual design principles of modern applications (e.g., File, Edit, and Help menus as well as context specific toolbars and preference dialogs). Design XML file(s) rather than Java code that can be used to initialize your game (i.e., describing game level configurations, game resources, and other game specific data as appropriate).
     * Claimed by 
     * Description:
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Replay Allow users to save, resume, or re-view previously played games.
     * Claimed by 
     * Description:
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Development Environment. Support game designers in debugging by providing the ability to pause and step the game action, to highlight attributes of game objects (like their health, velocity, nearest neighbors, etc.) visually or by clicking on them, and move or change objects to create specific game situations. Extend even further to provide a means for game designers to test that that games do expected things, can be won and lost, and progress through levels properly.
     * Claimed by 
     * Description:
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions:
  # Mod Environment Game companies encourage this practice because different versions of a game add extra play value and interest for purchasing the original game. Basic characteristics of the look and feel of the game should be able to be easily changed: the graphical icons used in game (e.g., to turn a SciFi game into a political statement); the keys used for interaction (e.g., to accommodate multiple players on the same keyboard); and the point values of game objectives (e.g., to make a bonus level). Extend it further by allowing users to change variables of game play or even add new rules or behaviors to a game.
     * Claimed by 
     * Description:
     * Design Goals:
     * Core Responsibilities:
     * Collaborates With:
     * Extensions: